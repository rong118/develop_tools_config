" 显示行D
set number

" 显示标尺
set ruler

" 历史纪录
set history=1000

" 输入的命令显示出来，看的清楚些
set showcmd

"显示模式
set showmode

" 启动显示状态行1，总是显示状态行2
set laststatus=2

" 语法高亮显示
syntax on

set fileencodings=utf-8,gb2312,gbk,cp936,latin-1
set fileformat=unix
set encoding=utf-8

" 配色方案
colorscheme gruvbox
set background=dark

" 指定配色方案是256色
set t_Co=256

" 设定字体 TODO change for different platforms
if has('gui_running')  " For using gvim
    " set guifont=Inconsolata\ for\ Powerline\ Medium\ 10
else " Accessing vim from terminal
  if system('uname -s') == "Darwin\n"
    " set guifont=Roboto\ Mono\ Medium\ for\ Powerline
  else
    " set guifont=Inconsolata\ for\ Powerline\ Medium
  endif
endif

" 命令行补全 
set wildmenu

" 去掉有关vi一致性模式，避免以前版本的一些bug和局限，解决backspace不能使用的问题
set nocompatible

" TODO figure out functions of backspace
set backspace=indent,eol,start
" set backspace=2

" 启用自动对齐功能，把上一行的对齐格式应用到下一行
set autoindent

" 依据上面的格式，智能的选择对齐方式，对于类似C语言编写很有用处
set smartindent

" 显示空白space和tab
set listchars=tab:>-,space:.
set list

" vim禁用自动备份
set nobackup
set nowritebackup
set noswapfile

" 启用撤销
set undodir=~/.vim/undodir
if !isdirectory(&undodir)
  call mkdir(&undodir, 'p', 0700)
endif

" 用空格代替tab
set expandtab

" 设置显示制表符的空格字符个数,改进tab缩进值
set tabstop=4

" 统一缩进为4，方便在开启了et后使用退格(backspace)键，每次退格将删除X个空格
set softtabstop=4

" 设定自动缩进为4个字符，程序中自动缩进所使用的空白长度
set shiftwidth=4

" 检测文件的类型
filetype on
filetype plugin on
filetype indent on

" 文件缩进及tab个数
autocmd Filetype make,html,vim,json,xml setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType python,java,javascript,go,perl setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType c,cpp setlocal expandtab shiftwidth=4 softtabstop=4 tabstop=4 cinoptions=:0,g0,(0,w1

" 显示匹配的括号
set showmatch

" 智能大小写
set smartcase 

" 高亮搜索的字符串
set hlsearch

" 边敲入，边搜索
set incsearch

" 自动保存
set autowrite

" 突出显示当前行 
set cursorline

" 突出显示当前列
" set cursorcolumn

" 支持鼠标操作
if has('mouse')
  set mouse=n
endif

"设置光标样式为竖线vertical bar
if $TERM_PROGRAM=~"iTerm"
  let &t_SI="\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
  let &t_EI="\<Esc>]50;CursorShape=0\x7" " Block in normal mode
else
  if has("autocmd") " xfce4 terminal on Debian
    au InsertEnter * silent execute "!sed -i.bak -e 's/TERMINAL_CURSOR_SHAPE_BLOCK/TERMINAL_CURSOR_SHAPE_IBEAM/' ~/.config/xfce4/terminal/terminalrc"
    au InsertLeave * silent execute "!sed -i.bak -e 's/TERMINAL_CURSOR_SHAPE_IBEAM/TERMINAL_CURSOR_SHAPE_BLOCK/' ~/.config/xfce4/terminal/terminalrc"
    au VimLeave * silent execute "!sed -i.bak -e 's/TERMINAL_CURSOR_SHAPE_IBEAM/TERMINAL_CURSOR_SHAPE_BLOCK/' ~/.config/xfce4/terminal/terminalrc"
  endif
endif

" 共享剪贴板
if system('uname -s') == "Darwin\n"
  set clipboard=unnamed "OSX
else
  set clipboard=unnamedplus "Linux
endif

" 文件被改动时自动载入
set autoread

" 去掉输入错误提示声音
set noeb

" 出错不出响声(only on Mac)
if $TERM_PROGRAM=~"iTerm"
  set visualbell
endif

" 设定 timer
set updatetime=200

" 切换回normal模式变快
set timeoutlen=1000 ttimeoutlen=0

" split windows to right by default
set splitright

" 插件管理 vim-plug
call plug#begin()
Plug 'morhetz/gruvbox'                 " Gruvbox theme 
Plug 'scrooloose/nerdtree'             " The NERDTree is a file explorer for the Vim editor.
Plug 'xuyuanp/nerdtree-git-plugin'     " A plugin of NERDTree showing git status flags.
Plug 'airblade/vim-gitgutter'          " A Vim plugin which shows a git diff in the 'gutter'
Plug 'vim-airline/vim-airline'         " Status/tabline plugin for vim.
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'              " Git Wraper and show git branch in vim-airline
Plug 'airblade/vim-gitgutter'          " Show a git diff in the sign column
Plug 'preservim/nerdcommenter'         " Enable comment plugin 
Plug 'nathanaelkane/vim-indent-guides' " Show indents
Plug 'voldikss/vim-floaterm'           " Float terminal cannot use in vim 8.1
Plug 'ktonga/vim-follow-my-lead'       " Show <Leader> mapping
" Plug 'kien/ctrlp.vim'                  " Search files plugin
" Plug 'valloric/youcompleteme'          " Auto complete plugin
" Plug 'Valloric/YouCompleteMe', { 'commit':'d98f896' } " For vim 8.1
" Plug 'mileszs/ack.vim'                 " Code search plugin by using ack
call plug#end()

"""""" nerdtree插件设定
" 自动打开nerdtree
"autocmd VimEnter * NERDTree

" 打开nerdtree 时显示隐藏文件
let NERDTreeShowHidden = 1 " Use shift + i to toogle this setup

" 打开nerdtree
nnoremap <leader>nt : NERDTreeToggle<CR>

"""""" Xuyuanp/nerdtree-git-plugin 配置
let g:NERDTreeGitStatusIndicatorMapCustom = {
  \ "Modified"  : "✹",
  \ "Staged"    : "✚",
  \ "Untracked" : "✭",
  \ "Renamed"   : "➜",
  \ "Unmerged"  : "═",
  \ "Deleted"   : "✖",
  \ "Dirty"     : "✗",
  \ "Clean"     : "✔︎",
  \ 'Ignored'   : '☒',
  \ "Unknown"   : "?"
  \ }

"""""" nerdcomment插件设定
let g:NERDCreateDefaultMappings = 1
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1

""""""" vim-airline插件设定
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#left_sep = '|'
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#hunks#enabled=1
let g:airline_theme='base16'

"""""" buffer 设定
" 跳转 buffer 1
nmap <leader>1 <Plug>AirlineSelectTab1
" 跳转 buffer 2
nmap <leader>2 <Plug>AirlineSelectTab2
" 跳转 buffer 3
nmap <leader>3 <Plug>AirlineSelectTab3
" 跳转 buffer 4
nmap <leader>4 <Plug>AirlineSelectTab4
" 跳转 buffer 5
nmap <leader>5 <Plug>AirlineSelectTab5
" 跳转 buffer 6
nmap <leader>6 <Plug>AirlineSelectTab6
" 跳转 buffer 7
nmap <leader>7 <Plug>AirlineSelectTab7
" 跳转 buffer 8
nmap <leader>8 <Plug>AirlineSelectTab8
" 跳转 buffer 9
nmap <leader>9 <Plug>AirlineSelectTab9

" 创造新的 buffer
nmap <leader>bn : enew<CR>
" 删除current buffer
nmap <leader>bc : bp<bar>sp<bar>bn<bar>bd<CR>

""""""" vim-indent-guides插件设定
let g:indent_guides_enable_on_vim_startup = 0

" 启用 indent
nmap <leader>i : IndentGuidesToggle<CR>

""""""" vim-gitgutter插件设定
let g:gitgutter_enabled  = 1
let g:gitgutter_map_keys = 0

" 移动到下一个git hunk
nmap <leader>n <Plug>(GitGutterNextHunk)
" 移动到上一个git hunk
nmap <leader>p <Plug>(GitGutterPrevHunk)
" 显示 git hunk
nmap <leader>v <Plug>(GitGutterPreviewHunk)
" 撤销 git hunk
nmap <leader>u <Plug>(GitGutterUndoHunk)
" 关闭 preview 窗口
nmap <leader>c : pclose<CR>

""""""" vim-floaterm 设定
let g:floaterm_autoclose = 1

" 开启 float-terminal
nmap <leader>t : FloatermToggle<CR>

""""""" YouCompleteMe 设定

" ycm 跳转 
nmap <leader>y : YcmCompleter GoToDefinitionElseDeclaration<CR>

""""""" ctrlp 设定: 文件查找
" 敲击<leader>+p键，进入搜索模式，这里为目录、MRU的混合模式
let g:ctrlp_map = '<leader>f'
" 根据通配符来忽略不需要搜索的文件
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc
" 本地工作目录的规则，可设置以下选项
" 'c' - 设为当前文件所在的目录
" 'r' - 如果最近的祖先有包含以下目录，则将该祖先目录设为工作目录：.git .hg .svn .bzr _darcs, 
" 'a' - 和c选项类似，理解为仅在r不生效的情况下，才执行c选项
let g:ctrlp_working_path_mode = 'ra'
" 哪些文件、目录、链接不在搜索范围内
let g:ctrlp_custom_ignore = {
         \ 'dir':  '\v[\/]\.(git|hg|svn)$',
         \ 'file': '\v\.(exe|so|dll)$',
         \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
         \ }

""""""" Ack.vim 设置：搜索
" 搜索完后不自动跳到第一个结果文件
cnoreabbrev Ack Ack!
" Ack搜索快捷键
nnoremap <Leader>a :Ack!<Space>
" Ack的选项设置
let g:ack_default_options = " -s -H --nocolor --nogroup --column --smart-case --follow"
" 如果不输入任何搜索参数，则默认以光标下的单词为搜索条件，并把它映射到<leader> + s上
nnoremap <leader>s :Ack!<CR>
" 高亮搜索结果
let g:ackhighlight = 1
"""""""

"""""" Others setting
" 在v模式下可以使用tab缩进
vmap <Tab> >gv
vmap <S-Tab> <gv

" 垂直分割屏幕
nmap <leader>vs : vs<CR>

" 开启/取消 highlight
nmap <leader>h : set hlsearch!<CR>

" Move between panels
nmap <leader><up> <C-w><up>
nmap <leader><down> <C-w><down>
nmap <leader><left> <C-w><left>
nmap <leader><right> <C-w><right>

" 处理tab (建议用buffer代替） 
"nmap <leader>ta : tabnew<CR>
"nmap <leader>tp : tabprevious<CR>
"nmap <leader>tn : tabnext<CR>
"nmap <leader>tc : tabclose <CR>
