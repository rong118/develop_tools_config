" 显示行D
set number

" 显示标尺
set ruler

" 历史纪录
set history=1000

" 输入的命令显示出来，看的清楚些
set showcmd

" 显示模式
set showmode

" 启动显示状态行1，总是显示状态行2
set laststatus=2

" 语法高亮显示
syntax on
set fileencodings=utf-8,gb2312,gbk,cp936,latin-1
set fileencoding=utf-8
set termencoding=utf-8
set fileformat=unix
set encoding=utf-8

" 配色方案
colorscheme gruvbox
set background=dark

" 指定配色方案是256色
set t_Co=256

" 设定字体
if system('uname -s') == "Darwin\n"
  set guifont=Roboto\ Mono\ Medium\ for\ Powerline\ 10
else
  set guifont=Inconsolata\ for\ Powerline\ Medium\ 10
endif

" 命令行补全 
set wildmenu

" 去掉有关vi一致性模式，避免以前版本的一些bug和局限，解决backspace不能使用的问题
set nocompatible
set backspace=indent,eol,start
set backspace=2

" 启用自动对齐功能，把上一行的对齐格式应用到下一行
set autoindent

" 依据上面的格式，智能的选择对齐方式，对于类似C语言编写很有用处
set smartindent

" vim禁用自动备份
set nobackup
set nowritebackup
set noswapfile

" 启用撤销
set undodir=~/.vim/undodir
if !isdirectory(&undodir)
  call mkdir(&undodir, 'p', 0700)
endif

" 用空格代替tab
set expandtab

" 设置显示制表符的空格字符个数,改进tab缩进值，默认为8，现改为4
set tabstop=4

" 统一缩进为4，方便在开启了et后使用退格(backspace)键，每次退格将删除X个空格
set softtabstop=4

" 设定自动缩进为4个字符，程序中自动缩进所使用的空白长度
set shiftwidth=4

" 显示匹配的括号
set showmatch

" 文件缩进及tab个数
autocmd FileType html,python,vim,javascript,go setl shiftwidth=4 tabstop=4
autocmd FileType java setl shiftwidth=4 tabstop=4
autocmd FileType c,cpp setlocal expandtab shiftwidth=4 softtabstop=4 tabstop=4 cinoptions=:0,g0,(0,w1
autocmd FileType json  setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType vim   setlocal expandtab shiftwidth=2 softtabstop=2

" 高亮搜索的字符串
set hlsearch

" 检测文件的类型
filetype on
filetype plugin on
filetype indent on

" C风格缩进
set cindent
set completeopt=longest,menu

" 去掉输入错误提示声音
set noeb

" 自动保存
set autowrite

" 突出显示当前行 
set cursorline

" 突出显示当前列
" set cursorcolumn

" 支持鼠标操作
if has('mouse')
  if has('gui_running') || (&term =~'xterm' && !has('mac'))
    set mouse=a
  else
    set mouse=nvi
  endif
endif

"设置光标样式为竖线vertical bar
" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM=~"iTerm"
  let &t_SI="\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
  let &t_EI="\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

" 共享剪贴板
if system('uname -s') == "Darwin\n"
  set clipboard=unnamed "OSX
else
  set clipboard=unnamedplus "Linux
endif

" 文件被改动时自动载入
set autoread

" 出错不出响声(only on Mac)
if $TERM_PROGRAM=~"iTerm"
  set visualbell
endif

" 插件管理 vim-plug
call plug#begin()
Plug 'scrooloose/nerdtree'             " The NERDTree is a file explorer for the Vim editor.
Plug 'xuyuanp/nerdtree-git-plugin'     " A plugin of NERDTree showing git status flags.
Plug 'airblade/vim-gitgutter'          " A Vim plugin which shows a git diff in the 'gutter'
Plug 'vim-airline/vim-airline'         " Status/tabline plugin for vim.
Plug 'vim-airline/vim-airline-themes'
Plug 'kien/ctrlp.vim'                  " Search file plugin
Plug 'airblade/vim-gitgutter'          " Show a git diff in the sign column
Plug 'valloric/youcompleteme'          " Auto complete plugin
" Plug 'Valloric/YouCompleteMe', { 'commit':'d98f896' }
Plug 'preservim/nerdcommenter'         " Enable comment plugin 
Plug 'lfv89/vim-interestingwords'      " Word highlighting and navigation throughout
Plug 'nathanaelkane/vim-indent-guides' " Show indents
call plug#end()

" 设定 timer
set updatetime=200

" 切换回normal模式变快
set timeoutlen=1000 ttimeoutlen=0


"""""" nerdtree插件设定
" 自动打开nerdtree
"autocmd VimEnter * NERDTree

" 打开nerdtree
nmap <leader>nt : NERDTreeToggle<CR>
""""""

"""""" nerdcomment插件设定
let g:NERDCreateDefaultMappings = 1
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1
""""""

""""""" vim-airline插件设定
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#left_sep = '|'
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline_theme='base16'

" 快速选择buffer 
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab

" 处理 buffer
nmap <leader>bn : enew<CR>
nmap <leader>bd : bdelete<CR>
""""""

""""""" vim-indent-guides插件设定
let g:indent_guides_enable_on_vim_startup = 0

" 启用 indent
nmap <leader>hi : IndentGuidesToggle<CR>
"""""""

""""""" vim-gitgutter插件设定
let g:gitgutter_enabled  = 1
let g:gitgutter_map_keys = 0

" vim-gitgutter 按键map
nmap <leader>nh <Plug>(GitGutterNextHunk)
nmap <leader>ph <Plug>(GitGutterPrevHunk)

nmap <leader>sh <Plug>(GitGutterPreviewHunk)
nmap <leader>uh <Plug>(GitGutterUndoHunk)

" close preview
nmap <leader>pc : pclose<CR>
"""""""

" 分割屏幕 vs and sp
nmap <leader>vs : vs<CR>
nmap <leader>vh : sp<CR>

" 跳转 YouCompleteMe 
nmap <leader>gd : YcmCompleter GoToDefinitionElseDeclaration<CR>

" Toggle highlight search
nmap <leader>rh : set hlsearch!<CR>

" 处理 vimgrep cmd
nmap <leader>co : copen<CR>

" show terminal
nmap <leader>tt : term<CR>

" 处理tab (建议用buffer代替） 
"nmap <leader>ta : tabnew<CR>
"nmap <leader>tp : tabprevious<CR>
"nmap <leader>tn : tabnext<CR>
"nmap <leader>tc : tabclose <CR>
